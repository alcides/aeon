type Level;
type Chunk;
type Chunks;
type Enemy;
type Enemies;
type List;

def np: Unit = native_import "numpy";


# Level
def new_level: (cs: Chunks) -> (e: Enemies) -> Level =
    native "lambda cs: lambda e: (cs, e)";

# Chunks
def empty_chunks: Chunks = native "[]";
def append_chunk: (cs: Chunks) -> (c: Chunk) -> Chunks =
    native "lambda xs: lambda x: xs + [x]";

# Chunk constructors
def new_gap_chunk: (x: Int | x >= 5 && x <= 95) ->
                   (y: Int | y >= 3 && y <= 5) ->
                   (wg: Int | wg >= 2 && wg <= 5) ->
                   (wBefore: Int | wBefore >= 2 && wBefore <= 7) ->
                   (wAfter: Int | wAfter >= 2 && wAfter <= 7) ->
                   Chunk = native "lambda x: lambda y: lambda wg: lambda wBefore: lambda wAfter: (' ', x, y, wg, wBefore, wAfter)";

def new_platform_chunk: (x: Int | x >= 5 && x <= 95) ->
                        (y: Int | y >= 3 && y <= 5) ->
                        (w: Int | w >= 3 && w <= 15) ->
                        Chunk = native "lambda x: lambda y: lambda w: ('P', x, y, w)";

def new_hill_chunk: (x: Int | x >= 5 && x <= 95) ->
                    (y: Int | y >= 3 && y <= 5) ->
                    (w: Int | w >= 3 && w <= 15) ->
                    Chunk = native "lambda x: lambda y: lambda w: ('H', x, y, w)";

def new_canon_hill_chunk: (x: Int | x >= 5 && x <= 95) ->
                          (y: Int | y >= 3 && y <= 5) ->
                          (h: Int | h >= 2 && h <= 3) ->
                          (wBefore: Int | wBefore >= 2 && wBefore <= 7) ->
                          (wAfter: Int | wAfter >= 2 && wAfter <= 7) ->
                          Chunk = native "lambda x: lambda y: lambda h: lambda wBefore: lambda wAfter: ('C', x, y, h, wBefore, wAfter)";

def new_tube_hill_chunk: (x: Int | x >= 5 && x <= 95) ->
                         (y: Int | y >= 3 && y <= 5) ->
                         (h: Int | h >= 2 && h <= 3) ->
                         (wBefore: Int | wBefore >= 2 && wBefore <= 7) ->
                         (wAfter: Int | wAfter >= 2 && wAfter <= 7) ->
                         Chunk = native "lambda x: lambda y: lambda h: lambda wBefore: lambda wAfter: ('T', x, y, h, wBefore, wAfter)";

def new_coin_chunk: (x: Int | x >= 5 && x <= 95) ->
                    (y: Int | y >= 3 && y <= 5) ->
                    (wc: Int | wc >= 3 && wc <= 15) ->
                    Chunk = native "lambda x: lambda y: lambda wc: ('c', x, y, wc)";

def new_canon_chunk: (x: Int | x >= 5 && x <= 95) ->
                     (y: Int | y >= 3 && y <= 5) ->
                     (h: Int | h >= 2 && h <= 3) ->
                     (wBefore: Int | wBefore >= 2 && wBefore <= 7) ->
                     (wAfter: Int | wAfter >= 2 && wAfter <= 7) ->
                     Chunk = native "lambda x: lambda y: lambda h: lambda wBefore: lambda wAfter: ('C', x, y, h, wBefore, wAfter)";

def new_tube_chunk: (x: Int | x >= 5 && x <= 95) ->
                    (y: Int | y >= 3 && y <= 5) ->
                    (h: Int | h >= 2 && h <= 3) ->
                    (wBefore: Int | wBefore >= 2 && wBefore <= 7) ->
                    (wAfter: Int | wAfter >= 2 && wAfter <= 7) ->
                    Chunk = native "lambda x: lambda y: lambda h: lambda wBefore: lambda wAfter: ('T', x, y, h, wBefore, wAfter)";
# Boxes

def new_block_coin: (x: Int | x >= 5 && x <= 95) ->
             (y: Int | y >= 3 && y <= 5) ->
             Chunk = native "lambda x: lambda y: ('bcoin', x, y)";

def new_block_power_up: (x: Int | x >= 5 && x <= 95) ->
             (y: Int | y >= 3 && y <= 5) ->
             Chunk = native "lambda x: lambda y: ('bpowerup', x, y)";

def new_block_rock_coin: (x: Int | x >= 5 && x <= 95) ->
             (y: Int | y >= 3 && y <= 5) ->
             Chunk = native "lambda x: lambda y: ('rcoin', x, y)";

def new_block_rock_empty: (x: Int | x >= 5 && x <= 95) ->
             (y: Int | y >= 3 && y <= 5) ->
             Chunk = native "lambda x: lambda y: ('rock', x, y)";

# Enemies
def empty_enemies: Enemies = native "[]";
def append_enemy: (l: Enemies) -> (i: Enemy) -> Enemies =
    native "lambda xs: lambda x: xs + [x]";

def new_goompa: (x: Int | x >= 5 && x <= 95) ->
             Enemy = native "lambda x: ('goomba', x)";

def new_koompa: (x: Int | x >= 5 && x <= 95) ->
             Enemy = native "lambda x: ('koopa', x)";


# Fitness function
def fitness_function: (level: Level) -> List =
    native "lambda x: __import__('examples.super_mario.super_mario_fitness', fromlist=['calculate_fitness']).calculate_fitness(x)";

@hide(np, fitness_function)
@multi_minimize_float(fitness_function new_map)
def new_map: Level = (?hole: Level);
