type Pair;

def Pair_fst_logical : (p:Pair) -> Int = uninterpreted;

def Pair_snd_logical : (p:Pair) -> Int = uninterpreted;

def Pair_mk : (x:Int) -> (y:{ y:Int | y > x}) -> Pair = native "lambda x: lambda y: (x,y)";


def assert : (b:{b:Bool | b}) -> Unit = native "()";

# def Pair_fst : (p:Pair) -> Int = native "lambda p: p[0]";

# def Pair_snd : (p:Pair) -> { y:Int | y == Pair_snd_logical p } = native "lambda p: p[1]";


def main (args:Int) : Unit {
    a = 1;
    b = 3;
    #x = Pair_mk a b;
    #y = assert true;
    print "hello"
}
