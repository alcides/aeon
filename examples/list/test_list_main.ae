
import "List.ae";

def consume : (l: {x:List[Int] | List_size(x) == 1}) -> Int = \n -> 0;

# def neg1 : Int = consume(List_empty);

# def neg2: Int = consume(List_cons(List_cons(List_empty)(1))(1));

def pos : Int = consume(List_cons(List_empty)(1));

def main (x:Int) : Unit {
    empty = List_empty;
    one = List_cons empty 3;
    two = List_cons one 2;
    three : List[Int] = List_cons two 1;
    plus : (x:Int) -> (y: Int) -> Int = (\x -> \y -> x + y);
    print (List_recursive three 0 plus)
}
