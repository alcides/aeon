# Snow Day (HW) : Given an integer representing a number
# of hours and 3 floats representing how much snow is on the
# ground, the rate of snow fall, and the proportion of snow
# melting per hour, return the amount of snow on the ground
# after the amount of hours given. Each hour is considered a
# discrete event of adding snow and then melting, not a continuous process.
# input : integer in [0, 20], float in [0.0, 20.0], float in [0.0, 10.0], float in [0.0, 1.0]
# output : float
import "Math.ae";

import extract_train_data from "PSB2.ae";
import get_input_list from "PSB2.ae";
import get_output_list from "PSB2.ae";
import calculate_list_errors from "PSB2.ae";
import get_snowd_synth_values from "PSB2.ae";
import unpack_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
import mean_absolute_error from "PSB2.ae";


def  train: TrainData =  extract_train_data ( load_dataset "snow-day" 200 200);
def  input_list : List =  get_input_list ( unpack_train_data  train);
def  expected_values : List =  get_output_list ( unpack_train_data  train);


@hide(extract_train_data,
            get_input_list,
            get_output_list,
            unpack_train_data,
            load_dataset,
            get_snowd_synth_values,
            calculate_list_errors)
@minimize_float(  mean_absolute_error ( get_snowd_synth_values  input_list synth) ( expected_values))
def synth ( n :Int  ,
                m :Float ,
                t :Float ,
                p :Float) : Float {
    (?hole:Float)
}
