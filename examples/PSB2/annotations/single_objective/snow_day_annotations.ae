# Snow Day (HW) : Given an integer representing a number
# of hours and 3 floats representing how much snow is on the
# ground, the rate of snow fall, and the proportion of snow
# melting per hour, return the amount of snow on the ground
# after the amount of hours given. Each hour is considered a
# discrete event of adding snow and then melting, not a continuous process.
# input : integer in [0, 20], float in [0.0, 20.0], float in [0.0, 10.0], float in [0.0, 1.0]
# output : float
import Math;
import PSB2;

#def snow_day ( n : {x:Int | 0 <= x && x <= 20} ,
#                m : {y:Float | 0.0 <= y && y <= 20.0},
#                t : {z:Float | 0.0 <= z && z <= 10.0},
#                p : {w:Float | 0.0 <= w && w <= 10.0}) : Float {
#    if n == 0 then m else snow_day (n - 1) ((1.0 -. p) *. (m +. t)) (t) (p)
#}

#def snow_day ( n :Int  ,
#                m :Float ,
#                t :Float ,
#                p :Float) : Float {
#    if n == 0 then m else snow_day (n - 1) ((1.0 -. p) *. (m +. t)) (t) (p)
#}

def  train: TrainData =  extract_train_data ( load_dataset "snow-day" 200 200);
def  input_list : List =  get_input_list ( unpack_train_data  train);
def  expected_values : List =  get_output_list ( unpack_train_data  train);

@minimize_float(  mean_absolute_error ( get_snowd_synth_values  input_list synth) ( expected_values))
def synth ( n :Int  ,
                m :Float ,
                t :Float ,
                p :Float) : Float {
    (?hole:Float)
}
