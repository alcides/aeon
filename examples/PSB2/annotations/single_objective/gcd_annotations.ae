# Given two integers, return the largest integer that
# divides each of the integers evenly.
# input : 2 integers in [1, 1000000]
# output : integer
import PSB2;

def gcd ( n:Int, z:Int) : Int {
    if z == 0 then n else (gcd(z)(n % z))
}

def train: TrainData = extract_train_data (load_dataset "gcd" 200 200);
def input_list : List = get_input_list (unpack_train_data train);
def expected_values : List = get_output_list (unpack_train_data train);

@minimize_float( mean_absolute_error (get_gcd_synth_values input_list synth) (expected_values))
def synth ( n:Int, z:Int) : Int {
    (?hole:Int)
}
# def largest_common_divisor ( n :{x:Int | 1 <= x && x <= 1000000},  m :{y:Int | 1 <= y && y <= 1000000}) : Int { gcd n m }
