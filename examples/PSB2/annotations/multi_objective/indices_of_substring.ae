import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";

type List;

def String_len : (i:String) -> Int = native "lambda i: len(i)";

def Range: (start : Int) -> (end : Int) -> (step : Int) -> List = native "lambda start: lambda end: lambda step: list(range(start, end, step ))";

def Filter :  (f: (s:Int) -> Bool) -> (l:List) -> List = native "lambda f: lambda xs: [x for x in xs if f(x)]";

def String_equal : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";

def String_slice : (i:String) -> (j:Int) -> (l:Int)-> String = native "lambda i: lambda j: lambda l: i[j:l]" ;


def train: TrainData = extract_train_data (load_dataset "indices-of-substring" 200 200);


def calculate_indices_of_substring_errors : (train : TrainData) -> (f:(a: String) -> (b: String) -> List ) -> List  =  native " lambda data: lambda func: [(lambda output, correct:(abs(len(output) - len(correct)) * 1000) + sum(abs(a - b) for a, b in zip(output, correct)))(func(str(x[0]))(str(x[1])), y[0]) for x, y in data ]";


@hide(extract_train_data,
            load_dataset,
            calculate_indices_of_substring_errors,
            train )
@multi_minimize_float(calculate_indices_of_substring_errors train synth)
def synth ( text :String) (target: String) : List {
    (?hole:List)

}
