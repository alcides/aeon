import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;

def String_split : (s:String) -> (sep:String) -> List = native "lambda s: lambda sep: s.split(sep, 1)";
def String_concat : (i:String) -> (j:String) -> String = native "lambda i: lambda j: i + j";

def Map_string : (f: (s:String) -> String) -> (l:String) -> String = native "lambda f: lambda xs: str(map(f, xs))";
def String_join : (l:List) -> (s:String) -> String = native "lambda l:lambda s:  s.join(l)";
def String_tail:(l:String) -> String = native "lambda xs: xs[1:]";
def String_contains:(s:String) -> (c:String) -> Bool = native "lambda s: lambda c: c in s";
def String_equal : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";
def String_get: (l:String) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";
def String_slice: (s:String) -> (start:Int) -> (end:Int) -> String = native "lambda s: lambda start: lambda end: s[start:end]";
def String_length: (s:String) -> Int = native "lambda s: len(s)";
def List_get: (l:List) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";


def train: TrainData = extract_train_data (load_dataset "solve-boolean" 200 200);


def calculate_solve_boolean_errors : (train : TrainData) -> (f:(a: String) -> Bool)  -> List  =  native "lambda data: lambda func:[0 if func(x[0]) == y[0] else 1 for x ,y  in data]";

@hide(extract_train_data,
            load_dataset,
            train,
            calculate_solve_boolean_errors)
@multi_minimize_float(calculate_solve_boolean_errors train synth )
def synth ( s : String ) : Bool {
    (?hole:Bool)
}
