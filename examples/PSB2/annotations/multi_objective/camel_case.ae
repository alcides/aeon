import psb2_aeon from "PSB2.ae";
import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;

def calculate_camel_case_errors : (train : TrainData) -> (f:(a: String) -> String)  -> List  =  native " lambda data: lambda func: [__import__('textdistance').levenshtein(func(x[0][0]), x[1][0]) for x in data]";

def String_split : (s:String) -> (sep:String) -> List = native "lambda s: lambda sep: s.split(sep)";
def String_concat : (i:String) -> (j:String) -> String = native "lambda i: lambda j: i + j";

def Map_string_string : (f: (s:String) -> String) -> (l:String) -> List = native "lambda f: lambda xs: list(map(f, xs))";
def Map_string_list : (f: (s:String) -> String) -> (l:List) -> List = native "lambda f: lambda xs: list(map(f, xs))";
def Map_list_list : (f: (s:String) -> List) -> (l:List) -> List = native "lambda f: lambda xs: list(map(f, xs))";

def String_join : (l:List) -> (s:String) -> String = native "lambda l:lambda s:  str(s.join(l))";
def String_tail:(l:String) -> String = native "lambda xs: xs[1:]";
def String_capitalize : (s:String) -> String = native "lambda s: s.capitalize()";
def String_get : (s:String) -> (i:Int) -> String = native "lambda s: lambda i: s[i]";
def String_tail:(l:String) -> String = native "lambda xs: xs[1:]";

def const1 : String = "-";
def const1 : String = " ";

def train: TrainData = extract_train_data (load_dataset "camel-case" 200 200);

@hide(extract_train_data,
            load_dataset,
            train,
            calculate_camel_case_errors)
@multi_minimize_float(calculate_camel_case_errors train synth)
def synth (s:String) : String {
    (?hole:String)
}
