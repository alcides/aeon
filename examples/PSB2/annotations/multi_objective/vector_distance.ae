import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;

def math : Unit = native_import "math";
def Math_sqrt_Float : (i:Float) -> Float = native "lambda i: math.sqrt(i)" ;
def Math_pow : (i:Int) -> (j:Int) -> Int = native "lambda i: lambda j: i ** j";
def Math_pow_Float : (i:Float) -> (j:Float) -> Float = native "lambda i: lambda j: i ** j";

def Map_Float_Float_Float_List_List: (function: (a: Float) -> (b: Float) -> Float) ->
                               (l: List) ->
                               (l2: List) ->
                               List =
    native "lambda f: lambda xs: lambda ys: list(map(lambda x, y: f(x)(y), xs, ys))";

def List_sum_Float : (l:List) -> Float = native "lambda xs: sum(xs)";

def List_size: (l:List) -> Int = uninterpreted;

def List_new : {x:List | List_size x == 0} = native "[]" ;

def List_append_float: (l:List) -> (i: Float) -> {l2:List | List_size l2 == List_size l + 1} = native "lambda xs: lambda x: xs + [x]";


def train: TrainData = extract_train_data (load_dataset "vector-distance" 200 200);

def input_list : List = get_input_list (unpack_train_data train);

def expected_values : List = get_output_list (unpack_train_data train);
def flatten_list : (t:List) -> List = native "lambda l: __import__('functools').reduce(lambda x, y: x + y, l)";

def calculate_vector_distance_errors : (train : TrainData) -> (f:(a: List) -> (b: List) -> Float)  -> List  =  native " lambda data: lambda func: [abs(func(x[0])(x[1]) - y[0]) for x , y in data]";


@hide(extract_train_data,
            load_dataset,
            calculate_vector_distance_errors,
            train)
@multi_minimize_float(calculate_vector_distance_errors train synth)
def synth  (vector1: List) (vector2: List) : Float {
    (?hole:Float)
 }
