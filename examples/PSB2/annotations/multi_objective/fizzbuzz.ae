import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";

type List;

def div3 (n:Int) : Bool {if ((n % 3) == 0) then true else false}
def div5 (n:Int) : Bool {if ((n % 5) == 0) then true else false}
def div15 (n:Int) : Bool {if ((n % 15) == 0) then true else false}

def toString : (n:Int) -> String = native "str";

def const1 : String = "Fizz";
def const2 : String = "Buzz";
def const3 : String = "FizzBuzz";

def train: TrainData = extract_train_data (load_dataset "fizz-buzz" 200 200);


def calculate_fizzbuzz_errors : (train : TrainData) -> (f:(a: Int) -> String)  -> List  =  native " lambda data: lambda func: [__import__('textdistance').levenshtein(func(x[0][0]), x[1][0]) for x in data]";


@hide(extract_train_data,
            load_dataset,
            calculate_fizzbuzz_errors,
            train )
@multi_minimize_float(calculate_fizzbuzz_errors train synth)
def synth (n:Int) : String {
    (?hole:String)
    }
