import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;

def math : Unit = native_import "math";
def Math_floor : (i:Float) -> Int = \i -> native "math.floor(i)";
def Math_toFloat : (i:Int) -> Float = \i -> native "float(i)";
def Math_toInt : (i:Float) -> Int = \i -> native "int(i)";

def String_len : (i:String) -> Int = \i -> native "len(i)";
def String_slice : (i:String) -> (j:Int) -> (l:Int)-> String = \i -> \j -> \l -> native "i[j:l]" ;


def equal_int : (a: Int) -> (b: Int) -> Bool = \x -> \y -> native "x == y";


def train: TrainData = extract_train_data (load_dataset "middle-character" 200 200);


def calculate_middle_char_errors : (train : TrainData) -> (f:(a: String) -> String)  -> List  =  \data -> \func -> native "[__import__('textdistance').levenshtein(func(x[0]), y[0]) for x , y in data]";


@hide(extract_train_data,
            load_dataset,
            calculate_middle_char_errors,
            train )
@multi_minimize_float(calculate_middle_char_errors train synth, 1)
def synth(s: String) : String {
    (?hole:String)
}
