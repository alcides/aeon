import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;

def get_fst: (l:String) -> String = native "lambda xs: xs[0]";
def get_snd: (l:String) -> String = native "lambda xs: xs[1]";

def String_len : (i:String) -> Int = native "lambda i: len(i)";
def String_slice : (i:String) -> (j:Int) -> (l:Int)-> String = native "lambda i: lambda j: lambda l: i[j:l]" ;
def String_zip : (i:String) -> (j:String) -> String = native "lambda i: lambda j: zip(i,j)";
def String_to_List : (i:String) -> List = native "lambda i: list(i)";
def String_to_Int : (i:String) -> Int = native "lambda i: int(i)";

def filter :  (f: (s:String) -> Bool) -> (l:List) -> List = native "lambda f: lambda xs: [x for x in xs if f(x)]";
# def filter2 :  (f: (s:String) -> Bool) -> (l:List) -> List = native "lambda f: lambda xs: filter(f, xs)";

def List_sum: (l:List) -> Int = native "lambda xs: sum(xs)";
def List_map_String_Int: (function:(a: String) -> Int) -> (l: List) -> List = native "lambda f: lambda xs: map(f, xs)";


def train: TrainData = extract_train_data (load_dataset "paired-digits" 200 200);


def calculate_paired_digits_errors : (train : TrainData) -> (f:(a: String) -> Int)  -> List  =  native " lambda data: lambda func: [abs(func(x[0][0]) - x[1][0]) for x in data]";


@hide(extract_train_data,
            load_dataset,
            calculate_paired_digits_errors,
            train )
@multi_minimize_float(calculate_paired_digits_errors train synth)
def synth (nums: String) : Int {
    (?hole:Int)
}
