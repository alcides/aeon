import extract_train_data from "PSB2.ae";
import psb2_aeon from "PSB2.ae";
import get_input_list from "PSB2.ae";
import get_output_list from "PSB2.ae";
import calculate_list_errors from "PSB2.ae";
import get_shop_synth_values from "PSB2.ae";
import unpack_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;
type Map;

def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = native "lambda list: len(list)";
def List_new : {x:List | List_size x == 0} = native "[]" ;
def List_append: (l:List) -> (i: Int) -> {l2:List | List_size l2 == List_size l + 1} = native "lambda xs: lambda x: xs + [x]";

def List_sum: (l:List) -> Int = native "lambda xs: sum(xs)";
def Math_max : (i:Int) -> (j:Int) -> Int = native "lambda i: lambda j: max(i,j)" ;
def Math_floor_division : (i:Int) -> (j:Int)-> Int = native "lambda i: lambda j: i // j" ;

def List_map_Int_Int_Int_List: (function: (a: Int) -> (b: Int) -> Int) ->
                               (l: List) ->
                               (l2: List) ->
                               List =
    native "lambda f: lambda xs: lambda ys: list(map(lambda x, y: f(x)(y), xs, ys))";



def train: TrainData = extract_train_data (load_dataset "shopping-list" 200 200);


def calculate_shopping_errors : (train : TrainData) -> (f:(a: List) -> (b: List) -> Int)  -> List  =  native " lambda data: lambda func: [abs(func(x[0])(x[1]) - y[0]) for x , y in data]";


@hide(extract_train_data,
            load_dataset,
            calculate_shopping_errors,
            train)
@multi_minimize_float(calculate_shopping_errors train synth)
def synth  (prices: List) (discounts: List) : Int {
    (?hole:Int)
 }
