import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;


def Math_floor_division : (i:Int) -> (j:Int)-> Int = \i -> \j -> native "i // j" ;

def String_concat : (i:String) -> (j:String) -> String = \i -> \j -> native "i + j";
def String_intToString : (i:Int) -> String = \i -> native "str(i)";


def train: TrainData = extract_train_data (load_dataset "square-digits" 200 200);
def calculate_square_digits_errors : (train : TrainData) -> (f:(a: Int) -> String)  -> List  =  \data -> \func -> native "[__import__('textdistance').levenshtein(func(x[0]), y[0]) for x , y in data]";


@hide(extract_train_data,
            calculate_square_digits_errors,
            load_dataset,
            train)
@multi_minimize_float(calculate_square_digits_errors train synth, 1)
def synth ( n : Int) : String {
    (?hole:String)
}
