import extract_train_data from "PSB2.ae";
import psb2_aeon from "PSB2.ae";
import get_input_list from "PSB2.ae";
import get_output_list from "PSB2.ae";
import calculate_list_errors from "PSB2.ae";
import get_mm_synth_values from "PSB2.ae";
import unpack_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";

type List;
type Counter;

def itertools : Unit = native_import "itertools";
def collections : Unit = native_import "collections";

def Zip : (xs:List) -> (ys:List) -> List = native "lambda xs: lambda ys: list(zip(xs, ys))";
def Map : (f: (s:List) -> String) -> (l:List) -> List = native "lambda f: lambda xs: list(map(f, xs))";
def Map_bool : (f: (s:List) -> Int) -> (l:List) -> List = native "lambda f: lambda xs: list(map(f, xs))";

def String_eq : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";
def List_sum : (l:List) -> Int = native "lambda xs: sum(xs)";
def String_toList : (s:String) -> List = native "lambda s: list(s)";
def String_Zip : (xs:String) -> (ys:String) -> List = native "lambda xs: lambda ys: (zip(xs, ys))";
def List_get_fst : (s: List) -> String = native "lambda s: s[0]";
def List_get_snd : (s: List) -> String = native "lambda s: s[1]";
def String_neq : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i != j";
def Filter :  (f: (s:List) -> Bool) -> (l:List) -> List = native "lambda f: lambda xs: [x for x in xs if f(x)]";
def Counter : (l:List) -> Counter = native "lambda xs: collections.Counter(xs)";
def Counter_intersection : (c1:Counter) -> (c2:Counter) -> Counter = native "lambda c1: lambda c2: c1 & c2";
def Counter_values : (c:Counter) -> List = native "lambda c: list(c.values())";
def Tuple : (a:Int) -> (b:Int) -> List = native "lambda a: lambda b: [a,b]";

def train: TrainData = extract_train_data (load_dataset "mastermind" 200 200);

def calculate_mastermind_errors : (train : TrainData) -> (f:(a: String) -> (b:String) -> List ) -> List  =  native " lambda data: lambda func: [(lambda output, correct:(abs(len(output) - len(correct)) * 1000) + sum(abs(a - b) for a, b in zip(output, correct)))(func(x[0])(x[1]), y) for x, y in data ]";


@hide(extract_train_data,
            load_dataset,
            calculate_mastermind_errors,
            train)
@multi_minimize_float(calculate_mastermind_errors train synth)
def synth ( code : String) (guess: String ) : List {
    (?hole:List)
}
