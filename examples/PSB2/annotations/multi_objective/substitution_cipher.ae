import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;
type Zip;
type Dict;

def Zip_String_String : (l1: String) -> (l2: String) -> Zip = \xs -> \ys -> native "zip(xs, ys)";
def Dict_zip : (l: Zip) -> Dict = \xs -> native "dict(xs)";
def String_list_to_String : (l:List) -> String = \l -> native "''.join(l)";
def Dict_get : (d: Dict) -> (k: String) -> (default: String) -> String = \d -> \k -> \y -> native "d.get(k, y)";


def Map_String_String: (function: (a:String) -> String) -> (l: String) -> List = \f -> \xs -> native "map(f, xs)";


def train: TrainData = extract_train_data (load_dataset "substitution-cipher" 200 200);

def calculate_cipher_errors : (train : TrainData) -> (f:(a: String) ->(a: String) ->(a: String) -> String)  -> List  =  \data -> \func -> native "[__import__('textdistance').levenshtein(func(x[0])(x[1])(x[2]), y[0]) for x , y in data]";



@hide(extract_train_data,
            load_dataset,
            calculate_square_digits_errors,
            train)
@multi_minimize_float(calculate_cipher_errors train synth, 1)
def synth (cipher_from: String) (cypher_to: String) (msg: String) : String {
    (?hole:String)
 }
