import extract_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
import calculate_coin_sum_errors from "PSB2.ae";

type List;
type Tuple;

def Math_floor_division : (i:Int) -> (j:Int) -> Int = native "lambda i: lambda j: i // j" ;

def List_size : (l:List) -> Int = uninterpreted;

def List_new : {x:List | List_size x == 0} = native "[]" ;

def List_append : (l:List) -> (i: Int) -> {l2:List | List_size l2 == List_size l + 1} = native "lambda xs: lambda x: xs + [x]";

def train: TrainData = extract_train_data (load_dataset "coin-sums" 200 200);

@hide(extract_train_data,
            load_dataset,
            train,
            calculate_coin_sum_errors
            )
@multi_minimize_float(calculate_coin_sum_errors train synth)
def synth (cents: Int) : List {
  (?hole:List)
 }
