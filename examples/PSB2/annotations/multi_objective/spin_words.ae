import extract_train_data from "PSB2.ae";
import psb2_aeon from "PSB2.ae";
import get_input_list from "PSB2.ae";
import get_output_list from "PSB2.ae";
import calculate_str_list_errors from "PSB2.ae";
import get_sw_synth_values from "PSB2.ae";
import unpack_train_data from "PSB2.ae";
import load_dataset from "PSB2.ae";
type List;

def String_len : (i:String) -> Int = \i -> native "len(i)";
def String_list_to_String : (l:List) -> String = \l -> native "' '.join(l)";
def map_String_String_List : (function:(a: String) -> String) -> (l: List) -> List = \f -> \xs -> native "map(f, xs)";
def String_split : (i:String) -> (j:String) -> List = \i -> \j -> native "i.split(j)" ;
def String_reverse : (i:String) -> String = \i -> native "i[::-1]";

def train: TrainData = extract_train_data (load_dataset "spin-words" 200 200);

def calculate_spin_words_errors : (train : TrainData) -> (f:(a: String) -> String)  -> List  =  \data -> \func -> native "[__import__('textdistance').levenshtein(func(x[0]), y[0]) for x , y in data]";

@hide(extract_train_data,
            unpack_train_data,
            load_dataset,
            calculate_spin_words_errors,
            train )
@multi_minimize_float(calculate_spin_words_errors train synth, 1)
def synth (phrase: String) : String {
    (?hole:String)
    }
