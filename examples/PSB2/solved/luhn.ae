type List;
type Range;
type Map;


def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = \list -> native "len(list)";
def List_new : {x:List | List_size x == 0} = native "[]" ;
def List_append (l:List) (i: Int) : {l2:List | List_size l2 == List_size l + 1} { native "l + [i]" }



def Math_sum : (l:List) -> Int = \xs -> native "sum(xs)";

def List_map_List_Range : (function:(a: Int) -> (b:Int) -> Int)
                        -> (l:List)
                        -> (r:Range)
                        -> List = \f -> \xs -> \r -> native "list(map(lambda x, y:f(x)(y), xs, r))";

def Range_new : (a:Int) -> (b:Int) -> Range = \a -> \b -> native "range(a,b)";

#ToDo refinement input (vector of 16 digits)

def even : (n:Int) -> Bool = \n -> n % 2 == 0;

def map_digit (x:Int) (i:Int) : Int {
    if (i % 2) == 0 then ( if (x * 2) > 9 then ((x * 2) - 9) else ( x * 2 ) : Int) else x
}

def luhn (digits: List) : Int {
    range : Range = Range_new 0 (List_length digits);
    transformed_digits: List = List_map_List_Range map_digit digits range;
    Math_sum transformed_digits
}

def repeated_list: (n:Int) -> (x:Int) -> List = \n -> \x -> native "[x]*n";

def main (args:Int) : Unit {
    l : List = repeated_list 16 9;
    print (luhn l)
}
