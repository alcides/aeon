type List;

def String_split : (s:String) -> (sep:String) -> List = native "lambda s: lambda sep: s.split(sep)";
def String_concat : (i:String) -> (j:String) -> String = native "lambda i: lambda j: i + j";

def Map_string : (f: (s:String) -> String) -> (l:String) -> String = native "lambda f: lambda xs: str(map(f, xs))";
def String_join : (l:List) -> (s:String) -> String = native "lambda l:lambda s:  s.join(l)";
def String_tail:(l:String) -> String = native "lambda xs: xs[1:]";
def String_contains:(s:String) -> (c:String) -> Bool = native "lambda s: lambda c: c in s";
def String_equal : (i:String) -> (j:String) -> Bool = native "lambda i: lambda j: i == j";
def String_get: (l:String) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";
def String_slice: (s:String) -> (start:Int) -> (end:Int) -> String = native "lambda s: lambda start: lambda end: s[start:end]";
def String_length: (s:String) -> Int = native "lambda s: len(s)";
def List_get: (l:List) -> (i:Int) -> String = native "lambda xs: lambda i: xs[i]";

def solve_boolean ( s : String ) : Bool {
    if (String_equal s "t") then
        true
    else
        if (String_equal s "f") then
            false
        else
             if (String_equal (String_get s (-2))  "&") then
                operand1: String = String_slice s 0 (-2);
                operand2: String = String_slice s (-1) (String_length s);
                solve_boolean operand1 && solve_boolean operand2
             else
                operand1: String = String_slice s 0 (-2);
                operand2: String = String_slice s (-1) (String_length s);
                solve_boolean operand1 || solve_boolean operand2

        }



def main (args:Int) : Unit {
    print (solve_boolean "f&f|t")
}
