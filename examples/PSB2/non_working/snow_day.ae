# Snow Day (HW) : Given an integer representing a number
# of hours and 3 floats representing how much snow is on the
# ground, the rate of snow fall, and the proportion of snow
# melting per hour, return the amount of snow on the ground
# after the amount of hours given. Each hour is considered a
# discrete event of adding snow and then melting, not a continuous process.
# input : integer in [0, 20], float in [0.0, 20.0], float in [0.0, 10.0], float in [0.0, 1.0]
# output : float

import math;
import PSB2;

#constants
def constant_i0 : Int = 0;
def constant_i1 : Int = 1;
def constant_in1 : Int = -1;
def constant_f0 : Float = 0.0;
def constant_f1 : Float = 1.0;
def constant_fn1 : Float = -1.0;


#def snow_day ( n : {x:Int | 0 <= x && x <= 20} ,
#                m : {y:Float | 0.0 <= y && y <= 20.0},
#                t : {z:Float | 0.0 <= z && z <= 10.0},
#                p : {w:Float | 0.0 <= w && w <= 10.0}) : Float {
#    if n == 0 then m else snow_day (n - 1) ((1.0 -. p) *. (m +. t)) (t) (p)
#}

def snow_day ( n :Int  ,
                m :Float ,
                t :Float ,
                p :Float) : Float {
    if n == 0 then m else snow_day (n - 1) ((1.0 -. p) *. (m +. t)) (t) (p)
}

def synth_snow_day ( n :Int  ,
                m :Float ,
                t :Float ,
                p :Float) : Float {
    (?hole:Float)
}

def fitness () : Float  {
    ds = load_dataset "snow-day" 200 200;
    train = extract_train_data ds;
    unpacked_data = unpack_train_data train;
    input_list = get_input_list unpacked_data;
    expected_values = get_output_list unpacked_data;
    actual_values : List = native "[synth_snow_day(x)(y)(z)(w) for x, y, z, w in input_list]";
    #actual_values : List = get_bb_synth_values input_list synth;
    mse = mean_square_error actual_values expected_values;
    mse
}
