import String;
import Math;
import PSB2;

# constants
def constant_i0 : Int = 0;
def constant_i1 : Int = 1;
def constant_i2 : Int = 2;
def constant_s : String = "";


def middle_char  (s: String) : String {
    str_len:Int = String_len s;
    if ((str_len % 2) == 0) then
        #snd_mid_char_index: Int = str_len / 2;
        snd_mid_char_index: Int = Math_floor(Math_toFloat(str_len) /. 2.0)+1;
        fst_mid_char_index: Int = snd_mid_char_index - 2 ;
        mid_chars = String_slice s fst_mid_char_index snd_mid_char_index;
        mid_chars
    else
        mid_char_index: Int = Math_floor(Math_toFloat(str_len) /. 2.0);
        m_char = String_slice s mid_char_index (mid_char_index+1);
        m_char

}

def synth_mid_char (s: String) : String {(?hole:String)}

def fitness(): Float {
    ds = load_dataset "middle-character" 200 200;
    train = extract_train_data ds;
    unpacked_data = unpack_train_data train;
    input_list = get_input_list unpacked_data;
    expected_values = get_output_list unpacked_data;
    actual_values : List = native "[synth_mid_char(x) for x in input_list]";
    expected_values_str = join_string_list expected_values;
    actual_values_str = join_string_list actual_values;
    str_distance = String_distance expected_values_str actual_values_str;
    str_distance

}
