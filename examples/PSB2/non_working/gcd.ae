# Given two integers, return the largest integer that
# divides each of the integers evenly.
# input : 2 integers in [1, 1000000]
# output : integer
# --not- working - recursion problem--
# RecursionError: maximum recursion depth exceeded in comparison

def gcd ( n:Int, z:Int) : Int {
    if z == 0 then n else (gcd(z)(n % z))
}

def synth_gcd ( n:Int, z:Int) : Int {
    (?hole:Int)
}
# def largest_common_divisor ( n :{x:Int | 1 <= x && x <= 1000000},  m :{y:Int | 1 <= y && y <= 1000000}) : Int { gcd n m }

def fitness () : Float  {
    ds = load_dataset "gcd" 200 200;
    train = extract_train_data ds;
    unpacked_data = unpack_train_data train;
    input_list = get_input_list unpacked_data;
    expected_values = get_output_list unpacked_data;
    actual_values : List = native "[synth_gcd(x)(y) for x, y in input_list]";
    mse = mean_square_error actual_values expected_values;
    mse
}
