type List;

def List_length : (l:List) -> Int = uninterpreted;

def List_empty : {l:List | List_length l == 0} = native "[]";
def List_cons : (v:Int) ->
                (l:List) ->
                {n:List | List_length n == List_length l } =
    native "lambda v: lambda l: [v] + l";


def List_extract_from_singleton :
    (l: {l:List | List_length l == 1}) ->
    Int = native "lambda l: l[0]";

def main (i:Int) : Unit {
    l = List_cons 25 List_empty;
    l2 = List_empty;
    l3 = List_cons 25 (List_cons 28 List_empty);
    v = List_extract_from_singleton l;
    print v
}
