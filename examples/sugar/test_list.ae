import List;
def consume : (l: {x:List | List_size(x) == 1}) -> Int = \n -> 0;

# def neg1 : Int = consume(List_new);

# def neg2: Int = consume(List_append(List_append(List_new)(1))(1));

def pos : Int = consume(List_append(List_new)(1));

def main (x:Int) : Unit {
    empty = List_new;
    one = List_append empty 3;
    two = List_append one 2;
    three : List = List_append two 1;
    plus : (x:Int) -> (y: Int) -> Int = (\x -> \y -> x + y);
    print (List_recursive three 0 plus)
}
