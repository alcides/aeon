import "List.ae";

type Random;

def random : Random = native_import "random";


# Generators

def generateInt (r:Random) : Int { native "r.randint(-1000, 1000)" }

def generateFloat (r:Random) : Float { native "r.uniform(0, 100)" }

def generateList (r:Random) : (List Int) { native "[[r.randint(0, 100) for _ in range(r.randint(0, 10))] for _ in range(100)]" }


# Property Wrappers


def countTrues (l:(List Bool)) : Int {
    native "sum(1 for x in l if x)"
}

def repeat (v:a) (n:Int) : (List a) { native "[v for _ in range(n)]" }

def ratio (a:Int) (b:Int) : Float { native "a/b" }

def forAllInts (fun:(a: Int) -> Bool) : Float {
    n = 1000;
    vs = repeat random n;
    rds = List_map generateInt vs;
    rs = List_map fun rds;
    positive = (countTrues rs);
    ratio positive n
}

def forAllFloats (fun:(a: Float) -> Bool) : Float {
    n = 1000;
    vs = repeat random n;
    rds = List_map generateFloat vs;
    rs = List_map fun rds;
    positive = (countTrues rds);
    ratio positive n
}

def forAllLists (fun:(a: List) -> Bool) : Float {
    n = 1000;
    vs = repeat random n;
    rds = List_map generateList vs;
    rs = List_map fun rds;
    positive = (countTrues rds);
    ratio positive n
}
